//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `IAnnuaire.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IAnnuaire_h__
#define __IAnnuaire_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace server
{

class IAnnuaire;
class IAnnuairePrx;

}

namespace server
{

struct Annuaire
{
    ::std::string id;
    ::std::string nom;
    ::std::string numTel;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, nom, numTel);
    }
};

using liste = ::std::vector<Annuaire>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace server
{

class IAnnuaire : public virtual ::Ice::Object
{
public:

    using ProxyType = IAnnuairePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool ajoutAnnuaire(::std::string nom, ::std::string numTel, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ajoutAnnuaire(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string suppressionEnregistrement(::std::string id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_suppressionEnregistrement(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Annuaire rechercherPersonne(::std::string nom, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_rechercherPersonne(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual liste getListe(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getListe(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void display(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_display(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace server
{

class IAnnuairePrx : public virtual ::Ice::Proxy<IAnnuairePrx, ::Ice::ObjectPrx>
{
public:

    bool ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &IAnnuairePrx::_iceI_ajoutAnnuaire, nom, numTel, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ajoutAnnuaireAsync(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &IAnnuairePrx::_iceI_ajoutAnnuaire, nom, numTel, context);
    }

    ::std::function<void()>
    ajoutAnnuaireAsync(const ::std::string& nom, const ::std::string& numTel,
                       ::std::function<void(bool)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &server::IAnnuairePrx::_iceI_ajoutAnnuaire, nom, numTel, context);
    }

    /// \cond INTERNAL
    void _iceI_ajoutAnnuaire(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string suppressionEnregistrement(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &IAnnuairePrx::_iceI_suppressionEnregistrement, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto suppressionEnregistrementAsync(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &IAnnuairePrx::_iceI_suppressionEnregistrement, id, context);
    }

    ::std::function<void()>
    suppressionEnregistrementAsync(const ::std::string& id,
                                   ::std::function<void(::std::string)> response,
                                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                   ::std::function<void(bool)> sent = nullptr,
                                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &server::IAnnuairePrx::_iceI_suppressionEnregistrement, id, context);
    }

    /// \cond INTERNAL
    void _iceI_suppressionEnregistrement(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    Annuaire rechercherPersonne(const ::std::string& nom, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<Annuaire>(true, this, &IAnnuairePrx::_iceI_rechercherPersonne, nom, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto rechercherPersonneAsync(const ::std::string& nom, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Annuaire>>().get_future())
    {
        return _makePromiseOutgoing<Annuaire, P>(false, this, &IAnnuairePrx::_iceI_rechercherPersonne, nom, context);
    }

    ::std::function<void()>
    rechercherPersonneAsync(const ::std::string& nom,
                            ::std::function<void(Annuaire)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<Annuaire>(response, ex, sent, this, &server::IAnnuairePrx::_iceI_rechercherPersonne, nom, context);
    }

    /// \cond INTERNAL
    void _iceI_rechercherPersonne(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Annuaire>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    liste getListe(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<liste>(true, this, &IAnnuairePrx::_iceI_getListe, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getListeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<liste>>().get_future())
    {
        return _makePromiseOutgoing<liste, P>(false, this, &IAnnuairePrx::_iceI_getListe, context);
    }

    ::std::function<void()>
    getListeAsync(::std::function<void(liste)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<liste>(response, ex, sent, this, &server::IAnnuairePrx::_iceI_getListe, context);
    }

    /// \cond INTERNAL
    void _iceI_getListe(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<liste>>&, const ::Ice::Context&);
    /// \endcond

    void display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IAnnuairePrx::_iceI_display, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto displayAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IAnnuairePrx::_iceI_display, context);
    }

    ::std::function<void()>
    displayAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &server::IAnnuairePrx::_iceI_display, context);
    }

    /// \cond INTERNAL
    void _iceI_display(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IAnnuairePrx() = default;
    friend ::std::shared_ptr<IAnnuairePrx> IceInternal::createProxy<IAnnuairePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::server::Annuaire>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::server::Annuaire, S>
{
    static void read(S* istr, ::server::Annuaire& v)
    {
        istr->readAll(v.id, v.nom, v.numTel);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace server
{

using IAnnuairePtr = ::std::shared_ptr<IAnnuaire>;
using IAnnuairePrxPtr = ::std::shared_ptr<IAnnuairePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace server
{

class IAnnuaire;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< IAnnuaire>&);
::IceProxy::Ice::Object* upCast(IAnnuaire*);
/// \endcond

}

}

namespace server
{

class IAnnuaire;
/// \cond INTERNAL
::Ice::Object* upCast(IAnnuaire*);
/// \endcond
typedef ::IceInternal::Handle< IAnnuaire> IAnnuairePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::server::IAnnuaire> IAnnuairePrx;
typedef IAnnuairePrx IAnnuairePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IAnnuairePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace server
{

struct Annuaire
{
    ::std::string id;
    ::std::string nom;
    ::std::string numTel;

    bool operator==(const Annuaire& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(nom != rhs_.nom)
        {
            return false;
        }
        if(numTel != rhs_.numTel)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Annuaire& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(nom < rhs_.nom)
        {
            return true;
        }
        else if(rhs_.nom < nom)
        {
            return false;
        }
        if(numTel < rhs_.numTel)
        {
            return true;
        }
        else if(rhs_.numTel < numTel)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Annuaire& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Annuaire& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Annuaire& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Annuaire& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<Annuaire> liste;

}

namespace server
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_ajoutAnnuaire.
 */
class Callback_IAnnuaire_ajoutAnnuaire_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnnuaire_ajoutAnnuaire_Base> Callback_IAnnuaire_ajoutAnnuairePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_suppressionEnregistrement.
 */
class Callback_IAnnuaire_suppressionEnregistrement_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnnuaire_suppressionEnregistrement_Base> Callback_IAnnuaire_suppressionEnregistrementPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_rechercherPersonne.
 */
class Callback_IAnnuaire_rechercherPersonne_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnnuaire_rechercherPersonne_Base> Callback_IAnnuaire_rechercherPersonnePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IAnnuaire::begin_getListe.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_getListe.
 */
class Callback_IAnnuaire_getListe_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnnuaire_getListe_Base> Callback_IAnnuaire_getListePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::server::IAnnuaire::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_display.
 */
class Callback_IAnnuaire_display_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnnuaire_display_Base> Callback_IAnnuaire_displayPtr;

}

namespace IceProxy
{

namespace server
{

class IAnnuaire : public virtual ::Ice::Proxy<IAnnuaire, ::IceProxy::Ice::Object>
{
public:

    bool ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_ajoutAnnuaire(_iceI_begin_ajoutAnnuaire(nom, numTel, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ajoutAnnuaire(nom, numTel, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajoutAnnuaire(nom, numTel, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajoutAnnuaire(nom, numTel, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::server::Callback_IAnnuaire_ajoutAnnuairePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajoutAnnuaire(nom, numTel, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Context& context, const ::server::Callback_IAnnuaire_ajoutAnnuairePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ajoutAnnuaire(nom, numTel, context, cb, cookie);
    }

    bool end_ajoutAnnuaire(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ajoutAnnuaire(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string suppressionEnregistrement(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_suppressionEnregistrement(_iceI_begin_suppressionEnregistrement(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_suppressionEnregistrement(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_suppressionEnregistrement(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_suppressionEnregistrement(const ::std::string& id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_suppressionEnregistrement(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_suppressionEnregistrement(const ::std::string& id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_suppressionEnregistrement(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_suppressionEnregistrement(const ::std::string& id, const ::server::Callback_IAnnuaire_suppressionEnregistrementPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_suppressionEnregistrement(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_suppressionEnregistrement(const ::std::string& id, const ::Ice::Context& context, const ::server::Callback_IAnnuaire_suppressionEnregistrementPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_suppressionEnregistrement(id, context, cb, cookie);
    }

    ::std::string end_suppressionEnregistrement(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_suppressionEnregistrement(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::Annuaire rechercherPersonne(const ::std::string& nom, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_rechercherPersonne(_iceI_begin_rechercherPersonne(nom, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_rechercherPersonne(const ::std::string& nom, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_rechercherPersonne(nom, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rechercherPersonne(const ::std::string& nom, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercherPersonne(nom, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercherPersonne(const ::std::string& nom, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercherPersonne(nom, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercherPersonne(const ::std::string& nom, const ::server::Callback_IAnnuaire_rechercherPersonnePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercherPersonne(nom, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_rechercherPersonne(const ::std::string& nom, const ::Ice::Context& context, const ::server::Callback_IAnnuaire_rechercherPersonnePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_rechercherPersonne(nom, context, cb, cookie);
    }

    ::server::Annuaire end_rechercherPersonne(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_rechercherPersonne(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::server::liste getListe(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getListe(_iceI_begin_getListe(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getListe(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getListe(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getListe(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getListe(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getListe(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getListe(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getListe(const ::server::Callback_IAnnuaire_getListePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getListe(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getListe(const ::Ice::Context& context, const ::server::Callback_IAnnuaire_getListePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getListe(context, cb, cookie);
    }

    ::server::liste end_getListe(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getListe(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_display(_iceI_begin_display(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_display(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::server::Callback_IAnnuaire_displayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_display(const ::Ice::Context& context, const ::server::Callback_IAnnuaire_displayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_display(context, cb, cookie);
    }

    void end_display(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_display(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace server
{

class IAnnuaire : public virtual ::Ice::Object
{
public:

    typedef IAnnuairePrx ProxyType;
    typedef IAnnuairePtr PointerType;

    virtual ~IAnnuaire();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool ajoutAnnuaire(const ::std::string& nom, const ::std::string& numTel, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_ajoutAnnuaire(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string suppressionEnregistrement(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_suppressionEnregistrement(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Annuaire rechercherPersonne(const ::std::string& nom, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_rechercherPersonne(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual liste getListe(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getListe(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void display(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_display(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const IAnnuaire& lhs, const IAnnuaire& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IAnnuaire& lhs, const IAnnuaire& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::server::Annuaire>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::server::Annuaire, S>
{
    static void write(S* ostr, const ::server::Annuaire& v)
    {
        ostr->write(v.id);
        ostr->write(v.nom);
        ostr->write(v.numTel);
    }
};

template<typename S>
struct StreamReader< ::server::Annuaire, S>
{
    static void read(S* istr, ::server::Annuaire& v)
    {
        istr->read(v.id);
        istr->read(v.nom);
        istr->read(v.numTel);
    }
};

}
/// \endcond

namespace server
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_ajoutAnnuaire.
 */
template<class T>
class CallbackNC_IAnnuaire_ajoutAnnuaire : public Callback_IAnnuaire_ajoutAnnuaire_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_IAnnuaire_ajoutAnnuaire(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_ajoutAnnuaire(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 */
template<class T> Callback_IAnnuaire_ajoutAnnuairePtr
newCallback_IAnnuaire_ajoutAnnuaire(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_ajoutAnnuaire<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 */
template<class T> Callback_IAnnuaire_ajoutAnnuairePtr
newCallback_IAnnuaire_ajoutAnnuaire(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_ajoutAnnuaire<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_ajoutAnnuaire.
 */
template<class T, typename CT>
class Callback_IAnnuaire_ajoutAnnuaire : public Callback_IAnnuaire_ajoutAnnuaire_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_IAnnuaire_ajoutAnnuaire(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_ajoutAnnuaire(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 */
template<class T, typename CT> Callback_IAnnuaire_ajoutAnnuairePtr
newCallback_IAnnuaire_ajoutAnnuaire(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_ajoutAnnuaire<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_ajoutAnnuaire.
 */
template<class T, typename CT> Callback_IAnnuaire_ajoutAnnuairePtr
newCallback_IAnnuaire_ajoutAnnuaire(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_ajoutAnnuaire<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_suppressionEnregistrement.
 */
template<class T>
class CallbackNC_IAnnuaire_suppressionEnregistrement : public Callback_IAnnuaire_suppressionEnregistrement_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_IAnnuaire_suppressionEnregistrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_suppressionEnregistrement(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 */
template<class T> Callback_IAnnuaire_suppressionEnregistrementPtr
newCallback_IAnnuaire_suppressionEnregistrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_suppressionEnregistrement<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 */
template<class T> Callback_IAnnuaire_suppressionEnregistrementPtr
newCallback_IAnnuaire_suppressionEnregistrement(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_suppressionEnregistrement<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_suppressionEnregistrement.
 */
template<class T, typename CT>
class Callback_IAnnuaire_suppressionEnregistrement : public Callback_IAnnuaire_suppressionEnregistrement_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_IAnnuaire_suppressionEnregistrement(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_suppressionEnregistrement(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 */
template<class T, typename CT> Callback_IAnnuaire_suppressionEnregistrementPtr
newCallback_IAnnuaire_suppressionEnregistrement(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_suppressionEnregistrement<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_suppressionEnregistrement.
 */
template<class T, typename CT> Callback_IAnnuaire_suppressionEnregistrementPtr
newCallback_IAnnuaire_suppressionEnregistrement(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_suppressionEnregistrement<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_rechercherPersonne.
 */
template<class T>
class CallbackNC_IAnnuaire_rechercherPersonne : public Callback_IAnnuaire_rechercherPersonne_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Annuaire&);

    CallbackNC_IAnnuaire_rechercherPersonne(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        Annuaire ret;
        try
        {
            ret = proxy->end_rechercherPersonne(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 */
template<class T> Callback_IAnnuaire_rechercherPersonnePtr
newCallback_IAnnuaire_rechercherPersonne(const IceUtil::Handle<T>& instance, void (T::*cb)(const Annuaire&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_rechercherPersonne<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 */
template<class T> Callback_IAnnuaire_rechercherPersonnePtr
newCallback_IAnnuaire_rechercherPersonne(T* instance, void (T::*cb)(const Annuaire&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_rechercherPersonne<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_rechercherPersonne.
 */
template<class T, typename CT>
class Callback_IAnnuaire_rechercherPersonne : public Callback_IAnnuaire_rechercherPersonne_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Annuaire&, const CT&);

    Callback_IAnnuaire_rechercherPersonne(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        Annuaire ret;
        try
        {
            ret = proxy->end_rechercherPersonne(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 */
template<class T, typename CT> Callback_IAnnuaire_rechercherPersonnePtr
newCallback_IAnnuaire_rechercherPersonne(const IceUtil::Handle<T>& instance, void (T::*cb)(const Annuaire&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_rechercherPersonne<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_rechercherPersonne.
 */
template<class T, typename CT> Callback_IAnnuaire_rechercherPersonnePtr
newCallback_IAnnuaire_rechercherPersonne(T* instance, void (T::*cb)(const Annuaire&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_rechercherPersonne<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IAnnuaire::begin_getListe.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_getListe.
 */
template<class T>
class CallbackNC_IAnnuaire_getListe : public Callback_IAnnuaire_getListe_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const liste&);

    CallbackNC_IAnnuaire_getListe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        liste ret;
        try
        {
            ret = proxy->end_getListe(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_getListe.
 */
template<class T> Callback_IAnnuaire_getListePtr
newCallback_IAnnuaire_getListe(const IceUtil::Handle<T>& instance, void (T::*cb)(const liste&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_getListe<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_getListe.
 */
template<class T> Callback_IAnnuaire_getListePtr
newCallback_IAnnuaire_getListe(T* instance, void (T::*cb)(const liste&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_getListe<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IAnnuaire::begin_getListe.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_getListe.
 */
template<class T, typename CT>
class Callback_IAnnuaire_getListe : public Callback_IAnnuaire_getListe_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const liste&, const CT&);

    Callback_IAnnuaire_getListe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IAnnuairePrx proxy = IAnnuairePrx::uncheckedCast(result->getProxy());
        liste ret;
        try
        {
            ret = proxy->end_getListe(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_getListe.
 */
template<class T, typename CT> Callback_IAnnuaire_getListePtr
newCallback_IAnnuaire_getListe(const IceUtil::Handle<T>& instance, void (T::*cb)(const liste&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_getListe<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_getListe.
 */
template<class T, typename CT> Callback_IAnnuaire_getListePtr
newCallback_IAnnuaire_getListe(T* instance, void (T::*cb)(const liste&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_getListe<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::server::IAnnuaire::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_display.
 */
template<class T>
class CallbackNC_IAnnuaire_display : public Callback_IAnnuaire_display_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IAnnuaire_display(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_display<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_display<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_display<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnnuaire_display<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::server::IAnnuaire::begin_display.
 * Create a wrapper instance by calling ::server::newCallback_IAnnuaire_display.
 */
template<class T, typename CT>
class Callback_IAnnuaire_display : public Callback_IAnnuaire_display_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IAnnuaire_display(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T, typename CT> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_display<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T, typename CT> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_display<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T, typename CT> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_display<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::server::IAnnuaire::begin_display.
 */
template<class T, typename CT> Callback_IAnnuaire_displayPtr
newCallback_IAnnuaire_display(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnnuaire_display<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
