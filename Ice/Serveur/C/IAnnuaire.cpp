//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `IAnnuaire.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <IAnnuaire.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_server_IAnnuaire_ids[2] =
{
    "::Ice::Object",
    "::server::IAnnuaire"
};
const ::std::string iceC_server_IAnnuaire_ops[] =
{
    "ajoutAnnuaire",
    "display",
    "getListe",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "rechercherPersonne",
    "suppressionEnregistrement"
};
const ::std::string iceC_server_IAnnuaire_ajoutAnnuaire_name = "ajoutAnnuaire";
const ::std::string iceC_server_IAnnuaire_suppressionEnregistrement_name = "suppressionEnregistrement";
const ::std::string iceC_server_IAnnuaire_rechercherPersonne_name = "rechercherPersonne";
const ::std::string iceC_server_IAnnuaire_getListe_name = "getListe";
const ::std::string iceC_server_IAnnuaire_display_name = "display";

}

bool
server::IAnnuaire::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_server_IAnnuaire_ids, iceC_server_IAnnuaire_ids + 2, s);
}

::std::vector<::std::string>
server::IAnnuaire::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_server_IAnnuaire_ids[0], &iceC_server_IAnnuaire_ids[2]);
}

::std::string
server::IAnnuaire::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
server::IAnnuaire::ice_staticId()
{
    static const ::std::string typeId = "::server::IAnnuaire";
    return typeId;
}

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_ajoutAnnuaire(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_nom;
    ::std::string iceP_numTel;
    istr->readAll(iceP_nom, iceP_numTel);
    inS.endReadParams();
    bool ret = this->ajoutAnnuaire(::std::move(iceP_nom), ::std::move(iceP_numTel), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_suppressionEnregistrement(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    ::std::string ret = this->suppressionEnregistrement(::std::move(iceP_id), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_rechercherPersonne(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_nom;
    istr->readAll(iceP_nom);
    inS.endReadParams();
    Annuaire ret = this->rechercherPersonne(::std::move(iceP_nom), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_getListe(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    liste ret = this->getListe(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_display(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->display(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_server_IAnnuaire_ops, iceC_server_IAnnuaire_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_server_IAnnuaire_ops)
    {
        case 0:
        {
            return _iceD_ajoutAnnuaire(in, current);
        }
        case 1:
        {
            return _iceD_display(in, current);
        }
        case 2:
        {
            return _iceD_getListe(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_rechercherPersonne(in, current);
        }
        case 8:
        {
            return _iceD_suppressionEnregistrement(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
server::IAnnuairePrx::_iceI_ajoutAnnuaire(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_nom, const ::std::string& iceP_numTel, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_ajoutAnnuaire_name);
    outAsync->invoke(iceC_server_IAnnuaire_ajoutAnnuaire_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nom, iceP_numTel);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
server::IAnnuairePrx::_iceI_suppressionEnregistrement(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_suppressionEnregistrement_name);
    outAsync->invoke(iceC_server_IAnnuaire_suppressionEnregistrement_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
server::IAnnuairePrx::_iceI_rechercherPersonne(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Annuaire>>& outAsync, const ::std::string& iceP_nom, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_rechercherPersonne_name);
    outAsync->invoke(iceC_server_IAnnuaire_rechercherPersonne_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nom);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
server::IAnnuairePrx::_iceI_getListe(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<liste>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_getListe_name);
    outAsync->invoke(iceC_server_IAnnuaire_getListe_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
server::IAnnuairePrx::_iceI_display(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_server_IAnnuaire_display_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
server::IAnnuairePrx::_newInstance() const
{
    return ::IceInternal::createProxy<IAnnuairePrx>();
}
/// \endcond

const ::std::string&
server::IAnnuairePrx::ice_staticId()
{
    return IAnnuaire::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_server_IAnnuaire_ajoutAnnuaire_name = "ajoutAnnuaire";

const ::std::string iceC_server_IAnnuaire_suppressionEnregistrement_name = "suppressionEnregistrement";

const ::std::string iceC_server_IAnnuaire_rechercherPersonne_name = "rechercherPersonne";

const ::std::string iceC_server_IAnnuaire_getListe_name = "getListe";

const ::std::string iceC_server_IAnnuaire_display_name = "display";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::server::upCast(IAnnuaire* p) { return p; }

void
::IceProxy::server::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IAnnuaire>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IAnnuaire;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::server::IAnnuaire::_iceI_begin_ajoutAnnuaire(const ::std::string& iceP_nom, const ::std::string& iceP_numTel, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_ajoutAnnuaire_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_server_IAnnuaire_ajoutAnnuaire_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_server_IAnnuaire_ajoutAnnuaire_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nom);
        ostr->write(iceP_numTel);
        result->endWriteParams();
        result->invoke(iceC_server_IAnnuaire_ajoutAnnuaire_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::server::IAnnuaire::end_ajoutAnnuaire(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_server_IAnnuaire_ajoutAnnuaire_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::server::IAnnuaire::_iceI_begin_suppressionEnregistrement(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_suppressionEnregistrement_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_server_IAnnuaire_suppressionEnregistrement_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_server_IAnnuaire_suppressionEnregistrement_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_server_IAnnuaire_suppressionEnregistrement_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::server::IAnnuaire::end_suppressionEnregistrement(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_server_IAnnuaire_suppressionEnregistrement_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::server::IAnnuaire::_iceI_begin_rechercherPersonne(const ::std::string& iceP_nom, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_rechercherPersonne_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_server_IAnnuaire_rechercherPersonne_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_server_IAnnuaire_rechercherPersonne_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nom);
        result->endWriteParams();
        result->invoke(iceC_server_IAnnuaire_rechercherPersonne_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::server::Annuaire
IceProxy::server::IAnnuaire::end_rechercherPersonne(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_server_IAnnuaire_rechercherPersonne_name);
    ::server::Annuaire ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::server::IAnnuaire::_iceI_begin_getListe(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_server_IAnnuaire_getListe_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_server_IAnnuaire_getListe_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_server_IAnnuaire_getListe_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_server_IAnnuaire_getListe_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::server::liste
IceProxy::server::IAnnuaire::end_getListe(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_server_IAnnuaire_getListe_name);
    ::server::liste ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::server::IAnnuaire::_iceI_begin_display(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_server_IAnnuaire_display_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_server_IAnnuaire_display_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_server_IAnnuaire_display_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::server::IAnnuaire::end_display(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_server_IAnnuaire_display_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::server::IAnnuaire::_newInstance() const
{
    return new IAnnuaire;
}
/// \endcond

const ::std::string&
IceProxy::server::IAnnuaire::ice_staticId()
{
    return ::server::IAnnuaire::ice_staticId();
}

server::IAnnuaire::~IAnnuaire()
{
}

/// \cond INTERNAL
::Ice::Object* server::upCast(IAnnuaire* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_server_IAnnuaire_ids[2] =
{
    "::Ice::Object",
    "::server::IAnnuaire"
};

}

bool
server::IAnnuaire::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_server_IAnnuaire_ids, iceC_server_IAnnuaire_ids + 2, s);
}

::std::vector< ::std::string>
server::IAnnuaire::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_server_IAnnuaire_ids[0], &iceC_server_IAnnuaire_ids[2]);
}

const ::std::string&
server::IAnnuaire::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
server::IAnnuaire::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::server::IAnnuaire";
    return typeId;
#else
    return iceC_server_IAnnuaire_ids[1];
#endif
}

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_ajoutAnnuaire(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_nom;
    ::std::string iceP_numTel;
    istr->read(iceP_nom);
    istr->read(iceP_numTel);
    inS.endReadParams();
    bool ret = this->ajoutAnnuaire(iceP_nom, iceP_numTel, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_suppressionEnregistrement(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    ::std::string ret = this->suppressionEnregistrement(iceP_id, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_rechercherPersonne(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_nom;
    istr->read(iceP_nom);
    inS.endReadParams();
    Annuaire ret = this->rechercherPersonne(iceP_nom, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_getListe(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    liste ret = this->getListe(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
server::IAnnuaire::_iceD_display(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->display(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_server_IAnnuaire_all[] =
{
    "ajoutAnnuaire",
    "display",
    "getListe",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "rechercherPersonne",
    "suppressionEnregistrement"
};

}

/// \cond INTERNAL
bool
server::IAnnuaire::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_server_IAnnuaire_all, iceC_server_IAnnuaire_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_server_IAnnuaire_all)
    {
        case 0:
        {
            return _iceD_ajoutAnnuaire(in, current);
        }
        case 1:
        {
            return _iceD_display(in, current);
        }
        case 2:
        {
            return _iceD_getListe(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_rechercherPersonne(in, current);
        }
        case 8:
        {
            return _iceD_suppressionEnregistrement(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
server::IAnnuaire::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IAnnuaire, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
server::IAnnuaire::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IAnnuaire, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
server::_icePatchObjectPtr(IAnnuairePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IAnnuairePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IAnnuaire::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
